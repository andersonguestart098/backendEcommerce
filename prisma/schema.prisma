// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  CANCELED
}

model Banner {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // ID explícito com ObjectId para MongoDB
  imageUrl  String
  createdAt DateTime @default(now())
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId // ID explícito com ObjectId para MongoDB
  name        String
  description String
  price       Float
  image       String
  discount    Int
  paymentOptions PaymentOption[]
  colors      Color[]
  orderProducts OrderProduct[]
}

model Color {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // ID explícito com ObjectId para MongoDB
  name      String
  image     String
  productId String   @db.ObjectId
  product   Product? @relation(fields: [productId], references: [id])
}

model PaymentOption {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId // ID explícito com ObjectId para MongoDB
  option      String
  productId   String   @db.ObjectId
  product     Product? @relation(fields: [productId], references: [id])
}

model Order {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId // ID explícito com ObjectId para MongoDB
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  products   OrderProduct[]
  status     OrderStatus @default(PENDING)
  totalPrice Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model OrderProduct {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // ID explícito com ObjectId para MongoDB
  orderId   String   @db.ObjectId
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  order     Order    @relation(fields: [orderId], references: [id])
  quantity  Int
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // ID explícito com ObjectId para MongoDB
  name      String
  email     String   @unique
  password  String
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


