// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  APPROVED
  REJECTED
  AWAITING_STOCK_CONFIRMATION
  SEPARATED
  DISPATCHED
  DELIVERED
  CANCELED
}

model Banner {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // ID explícito com ObjectId para MongoDB
  imageUrl  String
  createdAt DateTime @default(now())
}

model Product {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId // ID explícito com ObjectId para MongoDB
  name            String
  price           Float
  description     String
  discount        Int
  image           String
  metersPerBox    Float
  weightPerBox    Float
  boxDimensions   String
  materialType    String
  freightClass    Int
  paymentOptions  PaymentOption[]  // Relacionamento com opções de pagamento
  colors          Color[]          // Relacionamento com cores
  orderProducts   OrderProduct[]   // Relacionamento com OrderProduct
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Color {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // ID explícito com ObjectId para MongoDB
  name      String
  image     String
  productId String   @db.ObjectId
  product   Product? @relation(fields: [productId], references: [id])
}

model PaymentOption {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // ID explícito com ObjectId para MongoDB
  option    String
  productId String   @db.ObjectId
  product   Product? @relation(fields: [productId], references: [id])
}

model Order {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  userId     String        @db.ObjectId
  user       User          @relation(fields: [userId], references: [id])
  products   OrderProduct[]  // Relacionamento com OrderProduct
  status     OrderStatus   @default(PENDING)
  totalPrice Float
  shippingCost Float 
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

model OrderProduct {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  order     Order    @relation(fields: [orderId], references: [id])
  quantity  Int
}

model User {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String   @unique
  password     String
  tipoUsuario  String   // Campo para diferenciar tipos de usuário (admin, cliente, etc.)
  orders       Order[]  // Relacionamento com pedidos
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
